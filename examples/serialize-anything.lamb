# === Serializing programs ===
# Every value in Tree Calculus is an (unlabeled) binary tree.
# Functions/programs are values like any other kind of data.
# Since our communication channels tend to speak in terms of
# bits/bytes rather than trees, we demonstrate how to encode
# and decode expressions as such.

# Helpers
_ = △
false = △
true = △ △
let = \x \f f x
fix = let (\x x x) $ \m
    let (\a \b \c △ (△ a) (△ △ c) b) $ \wait
    \f wait m (\x f (wait m x))
triage = \a \b \c △ (△ a b) c
foldr = \f \x fix $ \self triage x △ (\hd \tl f hd (self tl))
foldl = \f fix $ \self \x triage x △ (\hd \tl self (f x hd) tl)
map = \f foldr (\e \a △ (f e) a) []
concat = \a \b foldr △ b a
concats = foldr concat ""

# 0. Example values
example_number = 42
example_string = "Hello"
example_program = \first_name \last_name concats [example_string, " ", first_name, " ", last_name, "!"]
example_program "Jane" "Doe"

# 1. Bitstring from pre-order traversal
bitstr_encode = \x (fix $ \self triage (△ true) (\x \rest △ false $ △ true $ self x rest) (\x \y \rest △ false $ △ false $ △ true $ self x $ self y rest)) x △
bitstr_decode = \str triage △ △ (\x \_ x) $ foldr (triage (triage △ △ (\a triage △ △ (\b △ (a b)))) (\_ △ △) △) [] str
# Demo
bitstr_decode $ bitstr_encode example_number
bitstr_encode example_program # note: lists of bits are interpreted and rendered as a natural number by this environment
map (\bit △ bit 24) $ bitstr_encode example_program # rendering the bits as a string instead
(bitstr_decode $ bitstr_encode example_program) "Max" "Mustermann"

# 2. S-expression, balanced parentheses (less useful for transmission, but e.g. relevant in the context of succinct tree representations, see for instance https://ae.iti.kit.edu/download/gog10advantages.pdf)
bps_encode = \x (fix $ \self \x \rest △ '(' $ triage (\x x) self (\x \y \rest self x $ self y rest) x $ △ ')' rest) x △
bps_encode example_program
bps_decode = \x
  let (map (triage △ △ (\hd \tl hd)) x) $ \bits
  let (foldl (\s \b triage (△ △) (\_ triage △ △ $ \hd2 \tl let tl $ triage △ △ $ \hd1 △ (hd1 hd2)) △ b s) [\x x] bits) $ \stack
  triage △ △ (\hd \tl hd) stack

js_array_encode = \x (fix $ \self \x \rest △ '[' $ triage (\x x) self (\x \y \rest self x $ △ ',' $ self y rest) x $ △ ']' rest) x △
js_array_encode example_program
js_array_decode = \x
  let (map (triage △ △ (\_ triage △ △ (\hd \tl hd))) x) $ \bits
  let (foldl (\s \b triage (triage △ △ $ \hd2 \tl let tl $ triage △ △ $ \hd1 △ (hd1 hd2)) (\_ △ △) △ b s) [\x x] bits) $ \stack
  triage △ △ (\hd \tl hd) stack

# 3. Ternary, Polish notation
ternary_encode = \x (fix $ \self \x \rest triage (△ '0') (\x \rest △ '1' $ self x rest) (\x \y \rest △ '2' $ self x $ self y rest) x rest) x △
ternary_encode example_program
ternary_decode =
  \x (fix $ \self \str
    let str $ triage _ _ $ \hd \tl
    let hd $ triage _ _ $ \d0 \hd
    let hd $ triage _ _ $ \d1 \hd
    let (\tl \f f △ tl) $ \on0
    let (\tl self tl $ \res \tl \f f (△ res) tl) $ \on1
    let (\tl self tl $ \resl \tl self tl $ \resr \tl \f f (△ resl resr) tl) $ \on2
    triage (triage on0 (\_ on1) _ d0) (\_ on2) _ d1 tl
  )
  x (\res \tail res)

# 4. Explicit binary tree (F = fork, S = stem, L = leaf)
tree_encode = \x (fix $ \self \x \rest triage (\x △ 'L' x) (\x \rest △ '(' $ △ 'S' $ self x $ △ ')' rest) (\x \y \rest △ '(' $ △ 'F' $ self x $ self y $ △ ')' rest) x rest) x △
tree_encode example_program

# 5. base64
match_list = \oe \oc triage oe △ oc
match_pair = \op triage △ △ op
match_bool = \ot \of triage of (\_ ot) △
map_empty = △
map_set = \k \v \m (fix $ \self \k \m
  match_list v (\khd \ktl
    let (self ktl) $ \child_proc
    let (triage (△ △ △) △ △ m) $ match_pair $
    match_bool (\l \r △ l (child_proc r)) (\l \r △ (child_proc l) r) khd
  ) k) (bitstr_encode k) m
map_get = \k \m foldl (\m \k triage △ △ (\a \b match_bool b a k) m) m (bitstr_encode k)

succ = fix $ \self match_list 1 (match_bool (\tl △ false $ self tl) (△ true))
pred = fix $ \self match_list 0 (match_bool (match_list △ (\hd \tl △ false $ △ hd tl)) (\tl △ true $ self tl))
take = fix $ \self triage (\_ []) △ (\nhd \ntl match_list [] (\hd \tl △ hd $ self (pred $ △ nhd ntl) tl))
mapi = \f \l (fix $ \self match_list (\_ []) (\hd \tl \i △ (f hd i) $ self tl (succ i))) l 0

base64alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
base64alphabet_tree = 
  let (\f match_pair $ \a \b △ (f a) (f b)) $ \map_pair
  let (foldr (\e match_pair $ \a \b △ (△ e b) a) (△ [] [])) $ \splitter
  let (\x \y map_pair x $ splitter y) $ \split
  (split $ split $ split $ split $ split splitter) base64alphabet
bitstr_of_base64 =
  let (mapi (\x \i △ x (concat $ take 6 $ concat i [false,false,false,false,false,false])) base64alphabet) $ \entries
  let (foldl (\m match_pair $ \k \v map_set k v m) map_empty entries) $ \map
  foldr (\b64 \res (map_get b64 map) res) []

pair_at = \b match_pair (match_bool (\a \b b) (\a \b a) b)
head = match_list △ (\hd \tl hd)
base64alphabet_tree_get = \x0 \x1 \x2 \x3 \x4 \x5 head $ pair_at x5 $ pair_at x4 $ pair_at x3 $ pair_at x2 $ pair_at x1 $ pair_at x0 base64alphabet_tree
bitstr_to_base64 = fix $ \self match_list [] $ \x0
                             match_list [base64alphabet_tree_get x0 false false false false false] $ \x1
                             match_list [base64alphabet_tree_get x0 x1 false false false false] $ \x2
                             match_list [base64alphabet_tree_get x0 x1 x2 false false false] $ \x3
                             match_list [base64alphabet_tree_get x0 x1 x2 x3 false false] $ \x4
                             match_list [base64alphabet_tree_get x0 x1 x2 x3 x4 false] $ \x5 \xs
                             △ (base64alphabet_tree_get x0 x1 x2 x3 x4 x5) (self xs)

base64_decode = \x bitstr_decode $ bitstr_of_base64 x
base64_encode = \x bitstr_to_base64 $ bitstr_encode x
base64_encode example_program

# 6. Source code
to_source =
  let (△ '△') $ \qa
  let (\q (\x \r △ '(' (△ '△' (△ ' ' (q x (△ ')' r)))))) $ \qb
  let (\q (\x \y \r △ '(' (△ '△' (△ ' ' (q x (△ ' ' (q y (△ ')' r)))))))) $ \qc
  let (fix $ \self \x triage qa (qb self) (qc self) x) $ \q
  \x q x ""
to_source example_program
to_source $ \a \b \c a c (b c)

# 6a. Source code with higher level descriptions for subtrees, where
# K = △ △
# K1{x} = △ △ x
# S1{x} = △ (△ x)
# triage2{x,y} = △ (△ x y)
# triage3{x,y,z} = △ (△ x y) z
s_ = concat
to_source =
  let (\q \r s_"△" $ r) $ \ql
  let (\q \r s_"K" $ r) $ \qsl
  let (\x \q \r s_"K1{" $ q x $ s_"}" $ r) $ \qfl
  let (\x \q \r s_"S1{" $ q x $ s_"}" $ r) $ \qss
  let (\x \y \q \r s_"S2{" $ q x $ s_"," $ q y $ s_"}" $ r) $ \qfs
  let (\x \y \q \r s_"triage2{" $ q x $ s_"," $ q y $ s_"}" $ r) $ \qsf
  let (\x \y \z \q \r s_"triage3{" $ q x $ s_"," $ q y $ s_"," $ q z $ s_"}" $ r) $ \qff
  let (fix $ \self \x triage ql (triage qsl qss qsf) (triage qfl qfs qff) x self) $ \q
  \x q x ""
to_source $ let
to_source $ fix
to_source $ triage △ △
to_source $ triage △ △ △
to_source $ \a \b \c a c (b c)

# 6b. Allow code to represent expressions that *reduce* to the original tree
# K = △ △
# S = △ (△ (△ △ △)) △
# triage = △ (△ (△ △ (△ (△ (△ △ △))))) △
to_source =
  let (\q \r s_"△" $ r) $ \ql
  let (\q \r s_"K" $ r) $ \qsl
  let (\x \q \r s_"(K " $ q x $ s_")" $ r) $ \qfl
  let (\x \q \r s_"(S " $ q x $ s_")" $ r) $ \qss
  let (\x \y \q \r s_"(S " $ q x $ s_" " $ q y $ s_")" $ r) $ \qfs
  let (\x \y \q \r s_"(triage " $ q x $ s_" " $ q y $ s_")" $ r) $ \qsf
  let (\x \y \z \q \r s_"(triage " $ q x $ s_" " $ q y $ s_" " $ q z $ s_")" $ r) $ \qff
  let (fix $ \self \x triage ql (triage qsl qss qsf) (triage qfl qfs qff) x self) $ \q
  \x q x ""
to_source $ let
to_source $ fix
to_source $ triage △
to_source $ triage △ △
to_source $ triage △ △ △
to_source $ \a \b \c a c (b c)
to_source $ \a a
to_source $ \a \b a

# 6c. Detect further patterns, completely automatic and extensible
defs = [ # matched in reverse, so specify in increasing order of complexity
    △ "△" $ △, # do not remove this, acts as base case
    △ "K" $ \a \b a,
    △ "S" $ \a \b \c a c (b c),
    △ "I" $ \a a,
    △ "triage" $ triage,
    △ "fix" $ fix,
    △ "map" $ map,
    △ "succ" $ succ,
  ]

# Some more generic helpers
equal = fix $ \self triage
    (triage true (\_ false) (\_ \_ false))
    (\ax triage false (self ax) (\_ \_ false))
    (\ax \ay triage false (\_ false) (\bx \by match_bool (self ax bx) false (self ay by)))
zip = fix $ \self \l1 \l2
    (match_list
        (\l2 map (\item2 △ △ item2))
        (\h1 \t1 match_list (map (\item1 △ item1 △)) (\h2 \t2 △ (△ h1 h2)))
        l1 l2)
    (match_list
        (\l2 l2)
        (\h1 \t1 match_list (△ h1 t1) (\h2 \t2 self t1 t2))
        l1 l2)
none = △
some = \x △ x
# Note that [none] and [some] are both "△" (modulo eta-expansion), but -- lacking a type system -- rely
# on appropriate use (that is, "some" expects an argument) in order to be useful for code readability.
match_option = \on \os triage on os _
# 'a option list -> 'a list option
all = foldr (\o \ol 
    let o $ match_option none $ \o
    let ol $ match_option none $ \ol
    some (△ o ol)
  ) (some [])

# 'a encoding <=> meaning
# - △     <=> △
# - △ a b <=> a b
# - △ 'a  <=> 'a  (treated as opaque, blocks evaluation)
quote = fix $ \f triage △ (\x △ △ (f x)) (\x \y △ (△ △ (f x)) (f y))
qapp = \f \args foldl △ f args
qstem = \a qapp △ [a]
qfork = \a \b qapp △ [a, b]

qtriage = \apply \ounk \ot \os \of fix $ \self \x
  let x $
  triage ot (\a ounk x a) $
  triage os (\a \_ ounk x a) $
  triage of (\a \_ \_ ounk x a) $ \x00 \x0 \x1 \x2
  let (apply (△ (△ x00 x0) x1) x2) $ match_pair $ \x \blocker
  match_option self (\blocker \x ounk x blocker) blocker x

# 'a encoding_evaled := 'a encoding (max. lazy evaluated) * 'a option (blocking 'a, if exists)

# for opaque x, when does x block:
# x ?
# △ x ? ?
# △ (△ ? ?) ? x
# 'a encoding (max. evaluated) -> 'a encoding (max. evaluated) -> 'a encoding_evaled
apply =
  let △ $ \pair
  let (match_pair $ \res \block res) $ \ignore_blocker
  fix $ \self \a \b
    qtriage self
      (\a \blocker \b pair (△ a b) $ some blocker)
      (\b pair (qstem b) none) # △ b => no reduction
      (\a1 \b pair (qfork a1 b) none) # △ a1 b => no reduction
      (\a1 \a2 \b # △ a1 a2 b
        qtriage self
          (\a1 \blocker \a2 \b pair (△ (qfork a1 a2) b) $ some blocker)
          (\a2 \b pair a2 △) # △ △ a2 b
          (\a1 \a2 \b self (ignore_blocker $ self a1 b) (ignore_blocker $ self a2 b)) # △ (△ a1) a2 b
          (\a0 \a1 \a2 \b # △ (△ a0 a1) a2 b
            qtriage self
              (\b \blocker pair (△ (qfork (qfork a0 a1) a2) b) $ some blocker)
              (pair a0 none) # b = △
              (\y self a1 y) # b = △ y
              (\x \y self (ignore_blocker $ self a2 x) y) # b = △ x y
              b
          )
          a1
          a2
          b
      )
      a
      b
qtriage = qtriage apply

# 'a encoding -> 'a encoding_evaled
eval = \x qtriage (\x \blocker △ x $ △ blocker) (△ △ △) (\a △ (qstem a) △) (\a \b △ (qfork a b) △) x

# 'a list -> x -> 'a encoding_evaled -> x option list option
match = \as
  let (\x \_ \b some $ map (\a match_bool (some x) none $ equal a b) as) $ \onvar
  let (\xm \ym \res
    let res $ match_option none $ \res
    let xm $ match_option (some $ △ ym res) $ \xm
    let ym $ match_option (some $ △ (some xm) res) $ \ym
    match_bool (some $ △ (some xm) res) none $ equal xm ym
  ) $ \unify
  fix $ \self triage
    (qtriage (onvar △) (some $ map (\a none) as) (\_ none) (\_ \_ none))
    (\ax qtriage (onvar $ △ ax) none (self ax) (\_ \_ none))
    (\ax \ay qtriage (onvar $ △ ax ay) none (\_ false) (\bx \by
      let (self ax bx) $ match_option none $ \xm
      let (self ay by) $ match_option none $ \ym
      let (zip xm ym) $ \m
      foldr (match_pair unify) (some []) m
    ))
# 'a list -> x -> 'a encoding_evaled -> x list option
match = \as \x \q let (match as x q) $ match_option none $ all

# invert (f a b c ...) f = some [a, b, c, ...]
invert = \x \f
  let (quote f) $ \q
  let (fix $ \self \as
    let (eval $ qapp q $ map △ as) $ match_pair $ \q \block
    match_option (
      match_option
        (\self self $ △ △ $ map △ as)
        (\res \self some res)
        (match as x q)
    ) (\_ \self none) block self
  ) $ \iter
  iter []

_to_source = \defs
  let (\name match_list (\r s_ name r) (\x \xs \r s_"(" $ s_ name $ s_" " $ foldl (\s \x \r s $ s_" " $ x $ r) x xs $ s_")" $ r)) $ \format
  let (\q \x match_pair $ \name \def match_option none (\args some $ format name $ map q args) $ invert x def) $ \for_def
  let (\q \x match_option _ (\x x) $ foldr (\def \res match_option (\def for_def q x def) (\res \def some res) res def) none defs) $ \for_defs
  \x fix for_defs x ""
to_source = _to_source defs
to_source $ foldr
to_source $ map (\x x)
to_source $ map (\n succ $ succ n)
to_source $ let
to_source $ fix
to_source $ fix △
to_source $ triage △
to_source $ triage △ △
to_source $ triage △ △ △
to_source $ equal

# 6c appendix: Turning partial application of arithmetic function back into code
id = \x x
const = \x \_ x
w = \f \x f x x
not = match_bool false true
add_3bits =
  match_bool
    (match_bool (\c △ c true) (\c △ (not c) c))
    (match_bool (\c △ (not c) c) (\c △ c false))
add = let (fix $ \self match_list (match_bool (△ true △) false) (\hd \tl \c match_pair (\s \c △ s (self tl c)) (match_pair (add_3bits c) hd))) $ \helper
  \a \b helper (zip a b) false
double = \a match_list 0 (\_ \_ △ false a) a
compose = \f \g \x f $ g x
smart_compose = \f \g match_bool f (compose f g) $ equal id g
mul = \a match_option (\_ 0) id $ foldr
  (match_bool 
    (match_option (some id) $ \s some $ \b add (smart_compose double s b) b)
    (match_option none $ \s some $ smart_compose double s)) none a
defs = [ # matched in reverse, so specify in increasing order of complexity
    △ "0" $ 0,
    △ "const" $ const,
    △ "w" $ w,
    △ "compose" $ compose,
    △ "id" $ \a a,
    △ "double" $ double,
    △ "add" $ add,
  ]
to_source = _to_source defs
to_source $ mul 0
to_source $ mul 1
to_source $ mul 2
to_source $ mul 3
to_source $ mul 4
to_source $ mul 5
# validation
(w (compose add (compose double double))) 7
