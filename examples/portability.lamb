# The tiny, self-contained definition of Tree Calculus makes it trivial to run on any platform.
# Here we demonstrate runtimes in JavaScript (comparable to what powers this very playground here) and bash (leaning on perl).
# We will focus on evaluating functions that take a string and return a string.

# Example program: returns "granted" if "secret" is passed, otherwise returns "denied"
false = △
true = △ △
id = \x x
fix = (\m \wait \f wait m (\x f (wait m x))) (\x x x) (\a \b \c △ (△ a) (△ △ c) b)
triage = \a \b \c △ (△ a b) c
match_bool = \ot \of triage of (\_ ot) △
and = match_bool id (\_ false)
equal = fix $ \self triage
    (triage true (\_ false) (\_ \_ false))
    (\ax triage false (self ax) (\_ \_ false))
    (\ax \ay triage false (\_ false) (\bx \by and (self ax bx) (self ay by)))
example_program = \s match_bool "granted" "denied" $ equal s "secret"

# 1. JavaScript runtime (the actual reduction happens in "apply")
match_list = \oe \oc triage oe △ oc
foldr = \f \x fix $ \self match_list x (\hd \tl f hd (self tl))
concat = \a \b foldr △ b a
concat_list = foldr concat ""
program_to_js_array = \x (fix $ \self \x \rest △ '[' $ triage (\rest rest) self (\x \y \rest self y $ △ ',' $ self x rest) x $ △ ']' rest) x ""
to_javascript = \program concat_list ["arg => {
  const program = ", program_to_js_array program, ";
  // Read input string and turn it into a tree
  const ofB = b => b ? [[]] : [];
  const ofL = l => { let f = []; for (let i = l.length; i; i--) f = [f, l[i - 1]]; return f };
  const ofN = n => { let l = []; for (; n; n >>= 1) l.push(ofB(n % 2)); return ofL(l) };
  const ofS = s => ofL(s.split('').map(c => ofN(c.charCodeAt(0))));
  const input = ofS(arg);
  // Apply program to input and execute
  const result = [input, ...program];
  const todo = [result];
  while (todo.length) {
    const f = todo.pop();
    if (f.length < 3) continue;
    todo.push(f);
    const a = f.pop(), b = f.pop(), c = f.pop();
    if (a.length === 0) f.push(...b);
    else if (a.length === 1) {
      const newPotRedex = [c, ...b];
      f.push(newPotRedex, c, ...a[0]);
      todo.push(newPotRedex);
    }
    else if (a.length === 2)
      if (c.length === 0) f.push(...a[1]);
      else if (c.length === 1) f.push(c[0], ...a[0]);
      else if (c.length === 2) f.push(c[0], c[1], ...b);
  }
  // Turn result into string and print
  const toB = f => !!f?.length;
  const toL = f => { let l = []; while (f?.length) { l.push(f[1]); f = f[0]; } return l };
  const toN = f => toL(f).reduceRight((acc, b) => 2 * acc + (toB(b) ? 1 : 0), 0);
  const toS = f => toL(f).map(toN).map(x => String.fromCharCode(x)).join('');
  return toS(result); }"]
to_javascript example_program
# The above function could be run in a Node.JS app or a little website (enter "secret" into the first text box):
△ (△ "demo.html" "text/html") $ concat_list ["
  <style>*{font-size:100pt;text-align:center;border-radius:10pt;margin:10pt;}</style>
  <input type='text' placeholder='Input'><br>
  <input type='text' placeholder='Output'>
  <script>
    const program=",to_javascript example_program,";
    const [input,output]=document.querySelectorAll('input');
    input.oninput=()=>output.value=program(input.value);
    input.oninput();
  </script>"]

# 2. Bash runtime (leaning on Perl, in particular for PCRE substitutions)
binstr_quote = \x (fix $ \self triage (△ 49) (\x \rest △ 48 $ △ 49 $ self x rest) (\x \y \rest △ 48 $ △ 48 $ △ 49 $ self x $ self y rest)) x △
map = \f foldr (\e \a △ (f e) a) []
amp2quot = map (\c match_bool 34 c $ equal 38 c)
to_bash = \program concat_list [[35], "!/bin/bash
  set -euo pipefail
  program=", binstr_quote program, amp2quot " # this environment here does not support escaping, meaning we can'△ write double quotes in string constants; so we use & for quotes
  # Runtime
  function reduce {
    # 00011ab -> a
    # 000101abc -> 00ac0bc
    # 0001001abc1 -> a
    # 0001001abc01 -> 0b
    # 0001001abc001 -> 00c
    perl -pe 'while($_=~/000/){s/0001001(1|0(?1)(?1))(1|0(?2)(?2))(1|0(?3)(?3))001/00$3/g;s/0001001(1|0(?1)(?1))(1|0(?2)(?2))(1|0(?3)(?3))01/0$2/g;s/0001001(1|0(?1)(?1))(1|0(?2)(?2))(1|0(?3)(?3))1/$1/g;s/000101(1|0(?1)(?1))(1|0(?2)(?2))(1|0(?3)(?3))/00$1${3}0$2$3/g;s/00011(1|0(?1)(?1))(1|0(?2)(?2))/$1/g}'
  }
  # Conversions: string <=> encoded tree
  function of_list () {
    while read -r line; do
      echo -n &001$line&
    done
    echo 1
  }
  function to_list () {
    sed 's/1$//' | perl -pe &s/0(1|0(?1)(?1))/\1\n/g& | sed -e 's/^01//g;$d'
  }
  function of_string () {
    perl -ne 'printf &%vb\n&, $_'  | tr . '\n' | rev | sed 's/0/a/g;s/1/001011/g;s/a/0011/g;s/$/1/' | of_list
  }
  function to_string () {
    to_list | sed 's/1$//;s/0011/a/g;s/001011/1/g;s/a/0/g' | rev | echo &ibase=2;$(cat)& | bc | while read -r N; do printf &\\$(printf '%03o' &$N&)&; done
  }
  
  fifo=$(mktemp -u)
  mkfifo &$fifo&
  (echo -n 0$program; of_string) | reduce &$fifo& | to_string
  rm -f &$fifo&
 "
 ]
△ (△ "demo.sh" "text/x-shellscript") $ to_bash example_program

# After downloading demo.sh and marking it as executable, it can be used as follows:
# echo -n secret | ./demo.sh
# echo -n test | ./demo.sh
